[{"/home/user/Desktop/projects/Caluculator app/src/index.js":"1","/home/user/Desktop/projects/Caluculator app/src/App.jsx":"2"},{"size":191,"mtime":1674761394030,"results":"3","hashOfConfig":"4"},{"size":1833,"mtime":1674808571688,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","suppressedMessages":"8","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1ihcsel",{"filePath":"9","messages":"10","suppressedMessages":"11","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"12"},"/home/user/Desktop/projects/Caluculator app/src/index.js",[],[],"/home/user/Desktop/projects/Caluculator app/src/App.jsx",["13","14","15","16","17","18"],[],"import \"./index.css\";\nimport { useState } from \"react\";\n\nfunction App() {\n  const [calc, setCalc] = useState(\"\");\n  const [result, setResult] = useState(\"\");\n\n  const ops = [\"/\", \"*\", \"+\", \"-\", \".\"];\n  const updateCalc = value => {\n    if(\n    ops.includes(value) && calc === \"\" \n    ||\n    ops.includes(value) && ops.includes(calc.slice(-1)\n    )\n    ) {\n      return;\n    }\n    setCalc(calc +value);\n    \n    if(!ops.includes(value)) {\n      setResult(eval(calc + value).toString());\n    }\n  }\n  const createDigits = () => {\n    const digits = [];\n\n    for (let i = 1; i < 10; i++) {\n      digits.push(\n      <button \n        onClick={()=> updateCalc(i.toString())}\n         key={i}>\n          {i}\n         </button>);\n    }\n    return digits;\n  };\n  const calculate = ()=> {\n    setCalc(eval(calc).toString());\n  }\n  const deleteLast = ()=> {\n    if(calc ===\"\") {\n      return;\n    }\n    const value = calc.slice(0,-1)\n    setCalc(value)\n    setResult(calc.slice(0, -1))\n    }\n   \n  \n  return (\n    <div className=\"App\">\n      <div className=\"calculator\">\n        <div className=\"display\">\n         {result ? <span>{result}</span> : \"\"}\n         &nbsp;\n         {calc || \"0\"}\n        </div>\n        <div className=\"operators\">\n          <button onClick={()=> updateCalc(\"/\")}>/</button>\n          <button onClick={()=> updateCalc(\"*\")}>*</button>\n          <button onClick={()=> updateCalc(\"+\")}>+</button>\n          <button onClick={()=> updateCalc(\"-\")}>-</button>\n          <button onClick={deleteLast}>DEL</button>\n        </div>\n        <div className=\"digits\">\n          {createDigits()}\n          <button onClick={()=> updateCalc(\"0\")}>0</button>\n          <button onClick={()=> updateCalc(\".\")}>.</button>\n          <button onClick={calculate}>=</button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n",{"ruleId":"19","severity":1,"message":"20","line":11,"column":25,"nodeType":"21","messageId":"22","endLine":11,"endColumn":27},{"ruleId":"19","severity":1,"message":"20","line":12,"column":5,"nodeType":"21","messageId":"22","endLine":12,"endColumn":7},{"ruleId":"19","severity":1,"message":"23","line":12,"column":5,"nodeType":"21","messageId":"22","endLine":12,"endColumn":7},{"ruleId":"19","severity":1,"message":"23","line":13,"column":25,"nodeType":"21","messageId":"22","endLine":13,"endColumn":27},{"ruleId":"24","severity":1,"message":"25","line":21,"column":17,"nodeType":"26","messageId":"27","endLine":21,"endColumn":21},{"ruleId":"24","severity":1,"message":"25","line":38,"column":13,"nodeType":"26","messageId":"27","endLine":38,"endColumn":17},"no-mixed-operators","Unexpected mix of '&&' and '||'. Use parentheses to clarify the intended order of operations.","LogicalExpression","unexpectedMixedOperator","Unexpected mix of '||' and '&&'. Use parentheses to clarify the intended order of operations.","no-eval","eval can be harmful.","CallExpression","unexpected"]